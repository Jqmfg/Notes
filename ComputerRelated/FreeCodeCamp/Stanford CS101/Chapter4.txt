/////////////////////////////////////////////////
//                                             //
//                  Chapter 4                  //
//                                             //
/////////////////////////////////////////////////


SOFTWARE

In this section we will talk about "what is software"
how is it that something runs on a computer
when we talked about hardware we talked about the cpu
the cpu runs machine code instructions
these are extremely simple instructions
e.g.
compare 2 numbers
add 2 numbers
the code that we have seen before is much more complicated than this
What happens is that this code expands to several machine code instructions
What is a program?
A program is a series of CPU instructions
It is an enormous sequence, but they are all simple machine code instructions
somewhere in the ram, there is code for everything you can do in a computer
These are very simple things, but they come togethter to make a program
i.e. translates from machine code to programs as sand to a scultpure
The cpu runs a fetch execute cycle
the cpu starts with instruction 1 and runs it
when it is done with instruction 1, it moves down the list to instruction 2 etc
When we say a computer runs at 3GHz, this is what we are talking about
There are several instructions that we can use
One of them is to jump back to previous instructions that we have
This is how loops are implemented
If there is some piece of code that we want to do multiple times, then we send it back to earlier
We can also test some instruction so it might skip part of the code
By arranging the instructions just so, we can get something that looks like an if statement
how do we get it to this state
We load the instructions into RAM
e.g. when we have firefox, then we have it on our hard drive
firefox.exe has a lot of bytes in it and for the most part, it is just the instructions that make it up
What happens when we run the program
The first thing is that the bytes for the instructions get copied over to the RAM
Then we tell the cpu to execute starting at a specific spot
Now it is running firefox
Who handles the double click? Windows (or the OS)
The OS handles the whole system and handles starting and ending programs
This keeps things organized
They try to keep this RAM isolated from each other
The OS is the first thing that runs when your computer starts up
It puts up the first windows, and then after it is loaded, you can start to run other programs
You don't think of a digital camera like a computer, but it is the same idea
When the camera first starts up it is loading the OS
All of its functions can be thought of as programs
When a computer first starts up, how does it start running?
We have to think what computer does the computer run to run programs
The computer recognizes that it was turned off and that it has just started up
It runs a simple program that looks around for something that contains and OS on it
Then it loads that operating system
This is why it can be called boot up, because it is "picking itself up from its bootsraps"


COMPUTER LANGUAGES

We've seen little bits of javascript code, but now we want to connect that code to the cpu
A pogrammer works in some computer language
They have "high level" features like groups, if statements, and strings
These aren't actually present in the machine code
Programmers write source code in whatever language they are writing
Most language at the syntactic level look very similar
How do we get from e.g. C++ source code to the machine code
One way is a compiler
A compiler looks at the source code and translates it over to machine code
i.e. There is an if statement
There isn't a specific machine code statement that is an if statement
Instead it is multiple statements so it is translated to those multiple statements.
This compilation only has to happen once
It can be done at the factory
This compilation doesn't work backwards
This means that you can't get access to the source code
To fix a bug, you will go back to the source code and change it
Then you will run the compiler and make a new version of a program
This gives us a sense of what open source software is
It is a format where both the program and the source code is distributed
The two main features are that the source code is typically distributed for free
The other feature is that there is a sense of freedom
In open source software, if there is a bug or something that needs to be added, then you yourself can do it
You can make your own custom version of the software
There are many different types of license terms for the software
Most of the time, if you make some change to the source code, you must make it available to the public
Thus far, we have only talked about C++
there is a type of languages called dynamic languages
e.g. java, javascript, python
these are implemented by an interpreter rather than a compiler
This takes in code writen in some language and "runs it"
e.g. web prowlers include javascript interpreters
It can use the interpreter to run the code
The interpreter deals with the program one line at a time
It would look at what the line says and then it does it
Once it is done with a line, then it does the next line
The compiler does a bulk translation from the language to machine code
Interpreters make a translation on a per line basis
There are many different computer languages and there is no best language
Broadly speaking, compiled code tends to run faster
A lot of the detail and decisions have already been made
Dynamic language tend to have more features in dynamic languages
Dynamic language code tends to run slower on the cpu
One example of this is memory management
This refers to the problem of knowing how long bytes in memory are needed for something
in c/c++, memory management is, to a degree, manual
There may be times when memory must be managed manually
Most dynamic languages have automatic memory management
No programmer assistance is required
It will know when memory can be recycled
The programmer has less to do in a dynamic language, so programmers can get more work done
However, this also makes dynamic languages run more slowly
Generally speaking, the trend is towards dynamic languages
Programmers are scarce, so more work done by a programmer is most effective
There are lots of cpus, so programmers are more valuable
On whole, dynamic languages are becoming more popular
There is a thing called a jit (just in time comipler)
It tries to get the best of both worlds
The jit will take parts of the code and try to compile them on the fly
All modern browsers have jits for programming languages such as javascript
You don't get quite the performance of compiled code, but you get close


COMPUTER NETWORKING

We will talk about how computer networks work
They are like a phone systems for networks
Any computer can place a "call" to another computer
Starting at the small scale
A LAN (local area network) can be used to cover 1 floor of a building or a house
two very common examples of LAN technology are ethernet and wifi both are incredibly common
Wired ethernet works with wires about the size of a soda straw (cat5, cat5e, cat6 cables)
terminate in an rj-45 jack which is a little bit bigger than a phone wire
good for about 100m
A wireless router will have ethernet cables going into it and coming out
How is it that data gets from one place to another
say we have a file on one computer and we need to figure out how to get it to another computer
The networking layer will break the file into packets
these packets are fairly small and will be about 1500 bytes
When computer1 wants to send this image, it will break it into a series of packets
How do we send one packet on the wire?
Inside a packet, we have a series of 0s and 1s
The computer will read through the first packet and then send through the data
We come up with a scheme
i.e. for every 1, we will have 3.3V and for every 0 we will use 0V
The receiver is basically just looking at the wire
It will see a series of volts
The receiver observes the pattern of 3.3V and 0V and then translates it into the data
It will recover what the original byte was
The receiver reconstructs all of the bytes and makes the packet
This is how we transmit data from one computer to another
What about errors?
On modern ethernet, transmission occurs at about a billion bits per second
Every now and then, there will be an error
We use a technique called checksums
The sender, before it is sent, looks at the packet and adds them up
We might have a scheme where we use the last two digits of the number that we get for this checksum
The receive can do the same addition
Then we will check to see if the checksums match
If they don't, then the receiver can ask the sender to resend the packet
This provides a guarantee that each packet comes through correctly
This scheme is used not just in networking, but in many layers of computers
This is how we can have a large file on a thumb drive and it will always come through correctly
The real checksum scheme is a little more complicated
It is possible that the checksum might fail and the errors cancel out
We can now scale this up
How does ethernet scale up to having a bunch of computers all talking to each other?
The way ethernet works is that we can have a bunch of computers that all share one wire
The computers can cooperate to share that wire efficiently
Each computer has a unique address and it wants to send a packet
Every packet starts with a to: field
This will tell the packet where it wants to go to
The computer will wait for silence on the wire
After there is some silence on the wire, it will transmit the wire
It is more of a broadcast and the transmission occupies the entire wire
Every computer will listen to the wire at all times, but it is just looking for packets addressed the them
Computer1 will look for packets going to it, and along with all the others
The interesting case for sharing is what if computer1 wants to send a packet to computer4, but computer3 also has a packet to send
It is possible that both the computers will hear the same computer of silence and both decide to start sending
If both transmit, then there is said to be a collision. When this happens, the wire becomes garbled
At some point, the computers notice that someone is talking over them
If they both just heard the silence again and start transmitting, then there will just be a collision again
The result is that both computer1 and computer3 wait a random amount of time
One of them will go first and then we can go back to the regular strategy
Eventually we can use the wire pretty efficiently
That is how we can have all these computer connected to just one wire
Most people are probably not using wires, more likely we are using wifi
It is basically the same strategy
The hallmark of ethernet is that we only have multiple computers that share the same wire
Wifi is basically the same
There is some radio channel that they all share, and they all transmit on that
We have collisions and waiting to broadcast just like in ethernet
The setup
you have some shared resource that you want to use efficiently
the solution is to not use a central authority
instead we have distributed collaboration
this is very insecure as any computer can be read
if computer3 wanted to listen to packets for computer4, it could see it
Anybody on that LAN could listen into the conversation
This doesn't meant that all security is hopeless, it simply means that other methods are needed
Another quality is that as more and more computers use this network, the performance for an individual computer degrades
If one computer is using up a lot of the wire, then there is less time for other computers
This is a very popular and successful set of design choices


THE INTERNET TCP/IP

In this section we will go from LAN to the internet
We can think of the internet as a phone system for computers
It is scattered all over and every computer has an address
Every computer can call any other computer
The internet is based on government funded research
This created TCP/IP
These are open standards and have been enormously succesfull
For basic infrastructure, it is good to have an open standard
Every computer connected to the internet has an IP address
IP - Internet Protocol e.g. 171.64.64.166, 173.255.219.70
These are ipv4 addresses
There are ipv6 addresses, but they aren't common.
IP addresses are 32 bit
range from 0-255
xxx.xxx.xxx.xxx format
There are ranges of IP addresses assigned to certain areas
Localy the righthand numbers experience the most change
They are like phone numbers, they will have a country code/area code
We also have common names like google.com or codingbat.com
They are like ip addresses, but they use regular words
There is a worldwide directory that gets translated into an ip address (DNS - Domain Name System)
Routers are bits of networking equipment that connect multiple networks
They pick up a packet on one side and translate it over to another network
The router will provide a service for the computers that are connected to it and connect them to the internet
The computes will send the packets to the router, and then the router will send off that packet to the internet
The router will be the only one (usually) directly connected to the internet and then will provide the rest of the computers with it
The packets move around the internet through a bunch of little hops
Say that we want to send a packet from 171.64.64.166 to 173.255.219.70
We will send it through multiple other IPs in order to get that packet to its destination address
At the smaller routers, there is not much happening
Further "upstream", the packets will be sent to multiple core routers which are much more complex and faster
These core routers will send the packets around the internet and eventually back downstream to the destination
Routers don't know the entire route, they just know locally what is going on
The local computer doesn't know anything about the topography of the internet network, it just sends the packet
The routers themselves are dynamic and will constantly manage broken and slow routers
They are a distributed system and will work together in order to get the packet where it wants to go
There are also special local IP addresses that are reserved for LANs
10.x.x.x, 172.16.x.x and 192.168.1.x (etc.) are reserved for these LAN


TABLE DATA

In this section, we will look at a new form of data called a table
The code to work with tables will look similar to the code in images
The goal for this section is to start to understand the patterns that come through
For this demonstration, we will use a list of baby names along with other characteristics
Tables are just ways of storing data
The data in this table is organized into 4 tables and several rows
Rank 1 for this dataset means that it is the most popular name for this data
This is done dependent on age
This table just has all the names (in this case sorted by rank) with 2000 rows overall (1000 top boys and girls)
A database is a related concept to this idea of a table
The number of fields is not very bit (there might be only 8-10 categories)
The number of rows can be enormous (sometimes in the millions or billions)
We can think of our email inbox as sotred in a table
The fields might be things like to, from, data, subject, etc.
The rows can have as many as the amount of emails we have
The fields are the categories that we want for that particular table
There are many things that we deal with day to day that are stored in a computer in a table like structure
We will use the baby name table for several sections
e.g.
table = new SimpleTable("baby-2010.csv");
for(row:table) {
  print(row);
}
for images we had for(pixel:image) for tables we have for(row: table)
This is this means for each (pixel/row) in (image/table) we will do the following commands
In the above case, we are just printing off the row
This will print of all the 2000 names.
It will show that this line (print(row);) runs 2000 times
You may have noticed that the table is in a .csv file
This is a "comma separated value" file and is a common format for storing tabular data
Just looping through and printing each row is not what we usually want to do
Usually, we will just want to pick out the few that we do want to print out
In database terminology, this is called a query
We will put an if statement inside the loop
In the if test, we will write a test to only select some of the rows
The code
if (row.getField("rank") == 6) {
print row;
}
This will print out only the rows where the rank category is equal to 6
This if loop will be tested all 2000 times, but will only run the code inside it twice (because we have a boy and girl at rank 6)
Each field in this has a name (i.e. "name", "rank", "gender", "year")
This code will go to the "rank" column and check to see if the value there is 6
We use the == to compare if the two values are equal
We would logically think that we should just use = to check for equality
The single = is for assignment, the == is used for comparison
The basic pattern for this is 
for(row: table) {
  if(row.getField("") == "") {
    do stuff;
  }
}
We can also print off the top 10 ranks with
if(row.getField("rank") <= 10) {
  print(row);
}
This means if the rank is less than or equal to 10, then we will print off that name
We can print off only the girls with
if(row.getField("gender") == "girl") {
  print(row);
}
