/////////////////////////////////////////////////
//                                             //
//                  Chapter 9                  //
//                                             //
//              User Environment               //
/////////////////////////////////////////////////


## INTRODUCTION

By the end of this chapter, you should be able to:
  Use and configure user accounts and user groups
  Use and set environment variables
  Use the previous shell command history
  Use keyboard shortcuts
  Use and define aliases
  Use and set file permissions and ownership


SECTION 1: ACCOUNTS

Linux is a multiuser operating system (more than one user can log in at the same time)
To list the currently logged-on users, type $ who
To identify the current user type $ whoami
Use $who with the -a option to give more detailed information
Linux uses groups to organize users
Groups are collections of accounts that share permissions
Control of group membership is administered through the /etc/group file which shows a list of groups and their members
By default, every user belongs to the default/primary group
Whenever a user logs in, the group membership is set for their primary group and all the members who have the same level of access and privilege
Permissions on various files and directories can be modified at the group level
All Linux users are assigned a unique user ID (uid) which is an integer
They are also assigned one or more group IDs (gid) including a default one which is the same as the user ID
Fedora systems start uids at 500 while other distros start at 1000
The numbers associated with names through the files /etc/passwd and /etc/group
e.g. the first file might contain george:x:1002:1002:George Metesky:/home/george:/bin/bash
e.g. and the second george:x:1002
Groups are used to make a set of users who have common interests in terms of:
  access rights
  privileges
  security considerations
Access rights to files (and devices) are granted on the basis of the user and the group that they belong to
Distros have straightforward graphical interfaces for creating and removing users and groups and manipulating group membership
It is often useful to do so from the command line or from within shell scripts
Only the root user can add and remove users and groups
Adding a new user is done with useradd and removing an existing user is done with userdel
An account for the new user turkey would be done with $ sudo useradd turkey
Note that in openSUSE, useradd is not in the normal user's PATH so the command would be $ sudo /usr/sbin/useradd turkey
this sets the default home directory to /home/turkey and populates it with some basic files
It also adds a line to /etc/passwd such as
turkey:x:502:502::/home/turkey:/bin/bash
This sets the default shell to /bin/bash
Removing a user account can be done with $ userdel turkey
This will leave the /home/turkey directory intact
This can be useful for temporary inactivation
To remove the home directory also you can add the -r option to userdel
Typing id with no argument gives information about the current user
$ id
uid=500(george) gid=500(george) groups=106(fuse),500(george)
If given the name of another user as an argument, id will report information about that other user
Adding a group can be done with groupadd
$ sudo /usr/sbin/groupadd anewgroup
Groups can be removed with
$ sudo /usr/sbin/groupdel anewgroup
Adding a user to an already existing group is done with usermod
e.g. you would first look at what groups the user belongs to
  $ groups turkey
  turkey : turkey
Then add the new group
  $ sudo /usr/sbin/usermod -G anewgroup turkey
  $ groups turkey
  turkey : turkey anewgroup
These utilities update /etc/gropu as necessary
groupmod can be used to change group properties such as the Group ID (gid) with the -g option or its name with the -n option
You can also remove users from groups
The -G option to usermod must give a complete list of groups
If you do
  $ sudo /usr/sbin/usermod -G turkey turkey
  $ groups turkey
  turkey : turkey
Only the turkey group will be left
The root account is very powerful and has full access to the system
Other operating systems call this the administrator or admin account
In Linux, it is often called the superuser account
You must be extremely cautious before granting full root access to a user, they rarely need it
External attacks often consist of tricks used to elevate to the root account
You can use the sudo feature to assign more limited privileges to user accounts:
  on a temporary basis
  only for a specific subset of commands
When elevating privileges, you can use the command su (switch or substitute user) to launch a new shell running as another user
To do this, you must type in that other users' password
Most often, the other user is root and the new shell allows the use of elevated privileges until exited
It is almost always bad practice to use su to become root (both for security and stability)
Resulting errors can include deletion of vital files from the system and security breaches
Granting privileges using sudo is less dangerous and is preferred
By default, sudo must be enabled on a per-user basis
Some distros (such as Ubuntu) enable it by default for at least one main user, or give this as an installation option
To fully become root, one merely types su and is then prompted for the root password
To execute just one command with root privilege, type sudo <command>
When the command is complete, you will return to being a normal unprivileged user
sudo config files are stored in /etc/sudoers file and the /etc/sudoers.d/ directory
By default, the sudoers.d directory is empty
In Linux, the command shell program (generally bash) uses one or more startup files to configure the environment
Files in the /etc directory define global settings for all users
Initialization files in the user's home directory can include and/or override the global settings
The startup files can do anything the user would like to do in every command shell such as:
  Customizing the user's prompt
  Defining command-line shortcuts and aliases
  Setting the default text editor
  Setting the path for where to find executable programs
When you first login to Linux, /etc/profile is read and evaluated
After this, the following files are searched (if they exist) in the listed order
  1. ~/.bash_profile
  2. ~/.bash_login
  3. ~/.profile
The Linux login shell evaluates whatever startup file it comes across first and ignores the rest
If it finds ~/.bash_profile, it ignores ~/.bash_login and ~/.profile
Different distros may use different startup files
Every time you create a new shell, terminal window, etc. you do not perform a full system login
Only the ~/.bashrc file is read and evaulated
Although this file is not read and evaluated with the login shell, most distros/users include the ~/.bashrc file from within one of the three user-owned startup files
In Ubuntu, openSUSE, and CentOS distros, the user must make changes in the ~/.bash_profile file to include the ~/.bashrc file
The .bash_profile will have certain extra lines which collect the required customization parameters from .bashrc
